import {PetOwner, PetBusiness} from "../user/user"
import {ServiceListing} from "../serviceListing/serviceListing"
import {Booking} from "../appointments/appointments"
import { OrderItemStatus } from "../../schema"

// Note: Invoice must remain immutable as much as possible for accounting purposes
model Invoice {
  invoiceId  Int      @id @default(autoincrement())
  totalPrice Float // The total price of the time of transaction
  createdAt  DateTime @default(now())
  paymentId  String   @unique // to be obtained from Stripe transaction

  miscCharge Float // to account for tax/stripe_charge etc

  orderItems     OrderItem[]
  PetOwner       PetOwner    @relation(fields: [petOwnerUserId], references: [userId])
  petOwnerUserId Int
}

enum OrderItemStatus {
  PENDING_BOOKING // This OrderItem needs a booking, but user has not booked yet
  PENDING_FULFILLMENT // Ordered (booked, or not) but not yet fulfilled
  FULFILLED // Service has been delivered
  PAID_OUT // Revenue for this service has been paid out to PBs
  REFUNDED // Service is refunded
  EXPIRED // Service has expired without being fulfilled or refunded
}

// Note: OrderItem must remain immutable as much as possible for accounting purposes
model OrderItem {
  orderItemId    Int             @id @default(autoincrement())
  itemName       String // Name of the order item at the time of transaction
  itemPrice      Float // Item Price of the individual item at the time of transaction
  commissionRate Float // The commission rate at the time of transaction
  expiryDate     DateTime
  voucherCode    String // generated UUID to identify order
  status         OrderItemStatus @default(PENDING_FULFILLMENT)

  // Must be associated to invoice
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [invoiceId])

  // associated to service listing for additional info
  serviceListingId Int
  serviceListing   ServiceListing @relation(fields: [serviceListingId], references: [serviceListingId])

  // (Optional) Bookings associated with the order item
  booking Booking?

  RefundRequest RefundRequest?
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model RefundRequest {
  refundRequestId Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  status          RefundStatus @default(PENDING)
  reason          String? // Optional reason or notes for requesting the refund
  processedAt     DateTime? // Timestamp when the request was processed (approved/rejected)

  // Associations
  petOwnerId Int
  petOwner   PetOwner @relation(fields: [petOwnerId], references: [userId])

  orderItemId Int       @unique
  orderItem   OrderItem @relation(fields: [orderItemId], references: [orderItemId])

  petBusinessId Int
  petBusiness   PetBusiness @relation(fields: [petBusinessId], references: [userId])
}
