name: Build and Push to ECR, deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        mask-password: 'true'
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: 807334509142.dkr.ecr.ap-southeast-1.amazonaws.com
        ECR_REPOSITORY: pethub-image-repository
        IMAGE_TAG: ${{ github.sha }} # ensure unique image tag for each build
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        HOST: ec2-54-251-185-5.ap-southeast-1.compute.amazonaws.com # EC2 Public IPv4 DNS
        USERNAME: ec2-user # default for AWS AMI
        PEM_FILE: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # Your EC2 SSH private key stored in GitHub secrets
      run: |
        # Install SSH client
        sudo apt-get install -y openssh-client

        # Write the SSH key to a file
        echo "$PEM_FILE" > private_key.pem
        chmod 600 private_key.pem

        # SSH and pull the latest image, then run it
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USERNAME@$HOST <<EOF
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          RUNNING_CONTAINER=$(docker ps -q --filter ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
          if [ "$RUNNING_CONTAINER" != "" ]; then
              docker stop $RUNNING_CONTAINER
          fi
          docker run -d -p 3000:3000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        EOF
